buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
    }
}


apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'

group = "com.virtualdogbert"
version = "0.1"
description = "This library provides a writer for Groovy base configuration, that can be parsed buy the ConfigSlurper."


task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}



repositories {
    jcenter()
}

sourceSets {
    main.groovy.srcDir 'src'
    test.groovy.srcDir 'test'
}

dependencies {
    compile(
            'org.codehaus.groovy:groovy-all:2.4.11',
            'org.slf4j:slf4j-api:1.6.1',
            'ch.qos.logback:logback-classic:0.9.28'
    )

    testCompile(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.11',
            'org.spockframework:spock-core:1.0-groovy-2.4',
            'org.yaml:snakeyaml:1.18'
    )
}


publishing {
    publications {
        groovyMaven(MavenPublication) {
            from components.java
        }
    }
}

bintray {

    user = getPropertyOrUseDefault("bintrayUser", "fake_user")
    key = getPropertyOrUseDefault("bintrayKey", "fake_key")
    publications = ['groovyMaven']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'maven'
        name = 'GroovyConfigWriter'
        desc = 'This library provides a writer for Groovy base configuration, that can be parsed buy the ConfigSlurper.'
        issueTrackerUrl = "https://github.com/virtualdogbert/GroovyConfigWriter/issues"
        vcsUrl = "https://github.com/virtualdogbert/GroovyConfigWriter/"
        websiteUrl = "https://virtualdogbert.github.io/GroovyConfigWriter"
        licenses = ['Apache-2.0']
    }
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}

def asciidoctorAttributes = [
        copyright           : 'Apache License, Version 2.0',
        docinfo1            : 'true',
        doctype             : 'book',
        encoding            : 'utf-8',
        'front-cover-image' : 'image:cover.png[Front Cover,800,600]',
        icons               : 'font',
        id                  : project.name + ':' + project.version,
        idprefix            : '',
        idseparator         : '-',
        lang                : 'en',
        linkattrs           : true,
        numbered            : '',
        producer            : 'Asciidoctor',
        revnumber           : project.version,
        setanchors          : true,
        'source-highlighter': 'prettify',
        toc                 : 'left',
        toc2                : '',
        toclevels           : '2'
]

import org.asciidoctor.gradle.AsciidoctorTask

tasks.withType(AsciidoctorTask) {
    attributes asciidoctorAttributes
    outputDir new File(buildDir, 'docs')
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
}

task asciidoc(type: AsciidoctorTask, description: 'Generates single-page HTML, and PDF') {
    backends 'html5', 'pdf'
}

task docs(dependsOn: [asciidoc]) << {

    File dir = new File(buildDir, 'docs')
    ['pdf'].each { String ext ->
        File f = new File(dir, 'index.' + ext)
        if (f.exists()) {
            f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
        }
    }

    copy {
        from 'src/docs'
        into new File(buildDir, 'docs').path
        include '**/*.png'
    }
}
